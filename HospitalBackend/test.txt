const { MongoClient } = require('mongodb');

// Replace <username>, <password>, <clustername>, and <dbname>
const uri = "mongodb+srv://hasikababu01:sEMM55iJgxYQXNoJ@cluster0.1qkd7.mongodb.net/hospital?retryWrites=true&w=majority";

const client = new MongoClient(uri);

async function testConnection() {
    try {
        await client.connect();
        console.log("Connected to MongoDB Atlas!");
    } catch (err) {
        console.error("Error connecting to MongoDB Atlas:", err);
    } finally {
        await client.close();
    }
}

testConnection();



//for shift making 
// server.js
const express = require("express");
const { MongoClient } = require("mongodb");
const bodyParser = require("body-parser");
const multer = require("multer");
const path = require("path");
const cors = require("cors");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const dotenv = require("dotenv");
const session = require('express-session');

dotenv.config();
const app = express();
const port = 8081;

app.use(
  cors({
    origin: "http://localhost:3000", // Allow requests from this origin
    methods: "GET,POST,PUT,DELETE", // Specify allowed methods
    credentials: true, // Allow credentials (if needed)
  })
);

// MongoDB Configuration
const mongoUri = "mongodb+srv://hasikababu01:sEMM55iJgxYQXNoJ@cluster0.1qkd7.mongodb.net/";
const client = new MongoClient(mongoUri);

// Middleware
app.use(bodyParser.json());

// Middleware to verify JWT tokens
const authenticateJWT = (req, res, next) => {
  const authHeader = req.headers["authorization"];
  const token = authHeader && authHeader.split(" ")[1]; // Extract token

  if (!token) {
    return res.status(403).json({ error: "Token required" });
  }

  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
    if (err) {
      return res.status(403).json({ error: "Token is not valid" });
    }
    req.user = user; // Attach user info to request object
    next();
  });
};

// Configure Multer for file uploads
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, "uploads/"); // Directory where files will be stored
  },
  filename: (req, file, cb) => {
    cb(null, `${Date.now()}-${file.originalname}`);
  },
});

const upload = multer({
  storage: storage,
  fileFilter: (req, file, cb) => {
    const allowedTypes = ["image/jpeg", "image/png"];
    if (allowedTypes.includes(file.mimetype)) {
      cb(null, true);
    } else {
      cb(new Error("Only JPEG and PNG files are allowed"), false);
    }
  },
});

// Function to connect to MongoDB
async function connectToDatabase() {
  try {
    await client.connect();
    console.log("Connected to MongoDB");
  } catch (error) {
    console.error("Failed to connect to MongoDB:", error);
    process.exit(1); // Exit if connection fails
  }
}
connectToDatabase();

// POST API to create staff shift schedules
app.post("/api/staffshift", async (req, res) => {
  const { staffId, weekNumber, schedule } = req.body;

  if (!staffId || !weekNumber || !schedule) {
    return res.status(400).json({ error: "Missing required fields" });
  }

  try {
    const db = client.db("hospital"); // Database name
    const collection = db.collection("staffshift"); // Collection name

    const newShift = {
      staffId,
      weekNumber,
      schedule,
      createdAt: new Date(),
    };

    const result = await collection.insertOne(newShift);

    res.status(201).json({
      message: "Shift schedule created successfully",
      shiftId: result.insertedId,
    });
  } catch (error) {
    console.error("Error creating shift schedule:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});

// Start the server
app.listen(port, () => {
  console.log(`Server running at http://localhost:${port}`);
});
